{"version":3,"file":"VerifyEmail.js","sources":["../../src/views/VerifyEmail.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { verifyEmail } from '../controllers/emailSlice';\n\nimport StatusBarComponent from './components/StatusBarComponent';\n\nimport { isValidEmail } from '../utils/Validation';\n\nfunction VerifyEmail() {\n  const { emailEncoded, confirmationCode } = useParams();\n\n  const email = emailEncoded.replace(/%40/g, '@');\n\n  const dispatch = useDispatch();\n\n  const { emailSuccessMessage, emailErrorMessage, emailStatusCode } =\n    useSelector((state) => state.email);\n\n  const [message, setMessage] = useState(\n    'Check your email for the confirmation code and link.'\n  );\n  const [messageType, setMessageType] = useState('');\n\n  useEffect(() => {\n    if (isValidEmail(email) != true) {\n      setMessageType('error');\n      setMessage('Email is not valid.');\n    }\n  }, [email]);\n\n  useEffect(() => {\n    if (emailSuccessMessage) {\n      setMessage(emailSuccessMessage);\n      setMessageType('success');\n    }\n  }, [emailSuccessMessage]);\n\n  useEffect(() => {\n    if (emailErrorMessage) {\n      setMessage(emailErrorMessage);\n      setMessageType('error');\n    }\n  }, [emailErrorMessage]);\n\n  useEffect(() => {\n    if (\n      (email != '' || email != undefined) &&\n      (confirmationCode != '' || confirmationCode != undefined)\n    ) {\n      dispatch(verifyEmail({ email, confirmationCode }));\n    }\n  }, [email, confirmationCode]);\n\n  return (\n    <>\n      <main>\n        {message !== '' && (\n          <StatusBarComponent messageType={messageType} message={message} />\n        )}\n      </main>\n    </>\n  );\n}\n\nexport default VerifyEmail;\n"],"names":["VerifyEmail","_useParams","useParams","emailEncoded","confirmationCode","email","replace","dispatch","useDispatch","_useSelector","useSelector","state","emailSuccessMessage","emailErrorMessage","emailStatusCode","_useState","useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","messageType","setMessageType","useEffect","isValidEmail","verifyEmail","jsx","Fragment","children","StatusBarComponent"],"mappings":"+HAUA,SAASA,GAAc,CACrB,IAAAC,EAA2CC,EAAU,EAA7CC,EAAAF,EAAAE,aAAcC,EAAiBH,EAAjBG,iBAEhBC,EAAQF,EAAaG,QAAQ,OAAQ,GAAG,EAExCC,EAAWC,IAEXC,EACJC,EAAY,SAACC,EAAU,CAAA,OAAAA,EAAMN,MAAK,EAD5BO,IAAAA,oBAAqBC,EAAmBJ,EAAnBI,kBAAmBJ,EAAAK,gBAG1C,IAAAC,EAAwBC,EAAA,SAC5B,sDACF,EAAAC,EAAAC,EAAAH,EAAA,CAAA,EAFOI,EAASF,EAAA,CAAA,EAAAG,EAAUH,EAAA,CAAA,EAG1BI,EAAsCL,WAAS,EAAE,EAAAM,EAAAJ,EAAAG,EAAA,CAAA,EAA1CE,EAAAD,EAAA,CAAA,EAAaE,EAAcF,EAAA,CAAA,EAElCG,OAAAA,EAAAA,UAAU,UAAM,CACVC,EAAarB,CAAK,GAAK,KACzBmB,EAAe,OAAO,EACtBJ,EAAW,qBAAqB,EAEpC,EAAG,CAACf,CAAK,CAAC,EAEVoB,EAAAA,UAAU,UAAM,CACVb,IACFQ,EAAWR,CAAmB,EAC9BY,EAAe,SAAS,EAE5B,EAAG,CAACZ,CAAmB,CAAC,EAExBa,EAAAA,UAAU,UAAM,CACVZ,IACFO,EAAWP,CAAiB,EAC5BW,EAAe,OAAO,EAE1B,EAAG,CAACX,CAAiB,CAAC,EAEtBY,EAAAA,UAAU,UAAM,EAEXpB,GAAS,IAAMA,GAAS,QACxBD,GAAoB,IAAMA,GAAoB,OAE/CG,EAASoB,EAAY,CAAEtB,MAAAA,EAAOD,iBAAAA,CAAkB,CAAA,CAAC,CAErD,EAAG,CAACC,EAAOD,CAAgB,CAAC,EAG1BwB,EAAAA,IAAAC,EAAAA,SAAA,CACEC,SAACF,EAAA,IAAA,OAAA,CACEE,SAAYX,IAAA,UACVY,EAAmB,CAAAR,YAAAA,EAA0BJ,QAAAA,EAAkB,EAEpE,CACF,CAAA,CAEJ"}