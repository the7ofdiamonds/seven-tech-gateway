{"version":3,"file":"PasswordRecovery.js","sources":["../../src/views/PasswordRecovery.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { updatePassword } from '../controllers/passwordSlice';\n\nimport {\n  isValidConfirmationCode,\n  isValidEmail,\n  isValidPassword\n} from '../utils/Validation';\n\nimport StatusBarComponent from './components/StatusBarComponent';\n\nfunction PasswordRecovery() {\n  const { emailEncoded, confirmationCode } = useParams();\n\n  const email = emailEncoded.replace(/%40/g, '@');\n\n  const dispatch = useDispatch();\n\n  const {\n    passwordSuccessMessage,\n    passwordErrorMessage,\n    passwordStatusCode\n  } = useSelector((state) => state.password);\n\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showStatusbar, setShowStatusBar] = useState(false);\n  const [message, setMessage] = useState(\n    'Enter your preferred password twice.'\n  );\n  const [messageType, setMessageType] = useState('');\n\n  useEffect(() => {\n    if (\n      password != '' &&\n      confirmPassword != '' &&\n      password === confirmPassword\n    ) {\n      setMessage('You have entered your password twice.');\n      setMessageType('success');\n    }\n  }, [password, confirmPassword]);\n\n  useEffect(() => {\n    if (\n      password != '' &&\n      confirmPassword != '' &&\n      password != confirmPassword\n    ) {\n      setMessage('Passwords do not match.');\n      setMessageType('error');\n    }\n  }, [password, confirmPassword]);\n\n  useEffect(() => {\n    if (passwordSuccessMessage) {\n      setMessage(passwordSuccessMessage);\n      setMessageType('success');\n    }\n  }, [passwordSuccessMessage]);\n\n  useEffect(() => {\n    if (passwordErrorMessage) {\n      setMessage(passwordErrorMessage);\n      setMessageType('error');\n    }\n  }, [passwordErrorMessage]);\n\n  useEffect(() => {\n    if (message != '') {\n      setShowStatusBar('modal-overlay');\n      setTimeout(() => {\n        setShowStatusBar('');\n      }, 5000);\n    }\n  }, [message]);\n\n  const handleChangePassword = (e) => {\n    if (e.target.name == 'password') {\n      setPassword(e.target.value);\n    }\n  };\n\n  const handleChangeConfirmPassword = (e) => {\n    if (e.target.name == 'confirmPassword') {\n      setConfirmPassword(e.target.value);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (\n      isValidEmail(email) &&\n      isValidConfirmationCode(confirmationCode) &&\n      isValidPassword(password) &&\n      password === confirmPassword\n    ) {\n      dispatch(\n        updatePassword({ email, password, confirmPassword, confirmationCode })\n      );\n    }\n  };\n\n  return (\n    <>\n      <section>\n        <main>\n          <form action=\"\">\n            <table>\n              <thead></thead>\n              <tbody>\n                <tr>\n                  <td>\n                    <input\n                      type=\"password\"\n                      name=\"password\"\n                      placeholder=\"Password\"\n                      onChange={handleChangePassword}\n                      required\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <input\n                      type=\"password\"\n                      name=\"confirmPassword\"\n                      placeholder=\"Confirm Password\"\n                      onChange={handleChangeConfirmPassword}\n                      required\n                    />\n                  </td>\n                </tr>\n              </tbody>\n              <tfoot>\n                <tr>\n                  <td>\n                    <button type=\"submit\" onClick={handleSubmit}>\n                      <h3>CONFIRM</h3>\n                    </button>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                  <span className={showStatusbar}>\n                    {message != '' && (\n                      <StatusBarComponent\n                        messageType={messageType}\n                        message={message}\n                      />\n                    )}\n                  </span>\n                  </td>\n                </tr>\n              </tfoot>\n            </table>\n          </form>\n        </main>\n      </section>\n    </>\n  );\n}\n\nexport default PasswordRecovery;\n"],"names":["PasswordRecovery","_useParams","useParams","emailEncoded","confirmationCode","email","replace","dispatch","useDispatch","_useSelector","useSelector","state","password","passwordSuccessMessage","passwordErrorMessage","passwordStatusCode","_useState","useState","_useState2","_slicedToArray","setPassword","_useState3","_useState4","confirmPassword","setConfirmPassword","_useState5","_useState6","showStatusbar","setShowStatusBar","_useState7","_useState8","message","setMessage","_useState9","_useState10","messageType","setMessageType","useEffect","setTimeout","handleChangePassword","e","target","name","value","handleChangeConfirmPassword","handleSubmit","preventDefault","isValidEmail","isValidConfirmationCode","isValidPassword","updatePassword","jsx","Fragment","children","action","jsxs","type","placeholder","onChange","required","onClick","className","StatusBarComponent"],"mappings":"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"}