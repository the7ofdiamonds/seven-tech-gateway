{"version":3,"file":"AccountActivation.js","sources":["../../src/views/AccountActivation.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { activateAccount } from '../controllers/accountSlice';\n\nimport StatusBarComponent from './components/StatusBarComponent';\n\nimport { isValidEmail } from '../utils/Validation';\n\nfunction AccountActivation() {\n  const { emailEncoded, userActivationKey } = useParams();\n\n  const email = emailEncoded.replace(/%40/g, '@');\n\n  const dispatch = useDispatch();\n\n  const { accountSuccessMessage, accountErrorMessage, accountStatusCode } =\n    useSelector((state) => state.account);\n\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState('');\n\n  useEffect(() => {\n    if (isValidEmail(email) != true) {\n      setMessageType('error');\n      setMessage('Email is not valid.');\n    }\n  }, [email]);\n\n  useEffect(() => {\n    if (accountSuccessMessage) {\n      setMessage(accountSuccessMessage);\n      setMessageType('success');\n    }\n  }, [accountSuccessMessage]);\n\n  useEffect(() => {\n    if (accountStatusCode == 200) {\n      setTimeout(() => {\n        window.location.href = '/login';\n      }, 5000);\n    }\n  }, [accountStatusCode]);\n\n  useEffect(() => {\n    if (accountErrorMessage) {\n      setMessage(accountErrorMessage);\n      setMessageType('error');\n    }\n  }, [accountErrorMessage]);\n\n  useEffect(() => {\n    if (isValidEmail(email)) {\n      dispatch(activateAccount({ email, userActivationKey }));\n    }\n  }, [dispatch, email, userActivationKey]);\n\n  return (\n    <>\n      <main>\n        {message !== '' && (\n          <StatusBarComponent messageType={messageType} message={message} />\n        )}\n      </main>\n    </>\n  );\n}\n\nexport default AccountActivation;\n"],"names":["AccountActivation","_useParams","useParams","emailEncoded","userActivationKey","email","replace","dispatch","useDispatch","_useSelector","useSelector","state","account","accountSuccessMessage","accountErrorMessage","accountStatusCode","_useState","useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","messageType","setMessageType","useEffect","isValidEmail","setTimeout","window","location","href","activateAccount","jsx","Fragment","children","StatusBarComponent"],"mappings":"+HAUA,SAASA,GAAoB,CAC3B,IAAAC,EAA4CC,EAAU,EAA9CC,EAAAF,EAAAE,aAAcC,EAAkBH,EAAlBG,kBAEhBC,EAAQF,EAAaG,QAAQ,OAAQ,GAAG,EAExCC,EAAWC,IAEXC,EACJC,EAAY,SAACC,EAAU,CAAA,OAAAA,EAAMC,QAAO,EAD9BC,IAAAA,sBAAuBC,EAAqBL,EAArBK,oBAAqBC,EAAAN,EAAAM,kBAGpDC,EAA8BC,WAAS,EAAE,EAAAC,EAAAC,EAAAH,EAAA,CAAA,EAAlCI,EAAAF,EAAA,CAAA,EAASG,EAAUH,EAAA,CAAA,EAC1BI,EAAsCL,WAAS,EAAE,EAAAM,EAAAJ,EAAAG,EAAA,CAAA,EAA1CE,EAAAD,EAAA,CAAA,EAAaE,EAAcF,EAAA,CAAA,EAElCG,OAAAA,EAAAA,UAAU,UAAM,CACVC,EAAatB,CAAK,GAAK,KACzBoB,EAAe,OAAO,EACtBJ,EAAW,qBAAqB,EAEpC,EAAG,CAAChB,CAAK,CAAC,EAEVqB,EAAAA,UAAU,UAAM,CACVb,IACFQ,EAAWR,CAAqB,EAChCY,EAAe,SAAS,EAE5B,EAAG,CAACZ,CAAqB,CAAC,EAE1Ba,EAAAA,UAAU,UAAM,CACVX,GAAqB,KACvBa,WAAW,UAAM,CACfC,OAAOC,SAASC,KAAO,UACtB,GAAI,CAEX,EAAG,CAAChB,CAAiB,CAAC,EAEtBW,EAAAA,UAAU,UAAM,CACVZ,IACFO,EAAWP,CAAmB,EAC9BW,EAAe,OAAO,EAE1B,EAAG,CAACX,CAAmB,CAAC,EAExBY,EAAAA,UAAU,UAAM,CACVC,EAAatB,CAAK,GACpBE,EAASyB,EAAgB,CAAE3B,MAAAA,EAAOD,kBAAAA,CAAmB,CAAA,CAAC,CAEvD,EAAA,CAACG,EAAUF,EAAOD,CAAiB,CAAC,EAGrC6B,EAAAA,IAAAC,EAAAA,SAAA,CACEC,SAACF,EAAA,IAAA,OAAA,CACEE,SAAYf,IAAA,UACVgB,EAAmB,CAAAZ,YAAAA,EAA0BJ,QAAAA,EAAkB,EAEpE,CACF,CAAA,CAEJ"}