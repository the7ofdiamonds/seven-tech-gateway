{"version":3,"file":"AccountRecovery.js","sources":["../../src/views/AccountRecovery.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { unlockAccount } from '../controllers/accountSlice';\n\nimport { isValidEmail } from '../utils/Validation';\n\nimport StatusBarComponent from './components/StatusBarComponent';\n\nfunction AccountRecovery() {\n  const { emailEncoded, confirmationCode } = useParams();\n\n  const email = emailEncoded.replace(/%40/g, '@');\n\n  const dispatch = useDispatch();\n\n  const { accountSuccessMessage, accountErrorMessage } =\n    useSelector((state) => state.account);\n\n  const [message, setMessage] = useState(\n    'Check your email for the confirmation code and link.'\n  );\n  const [messageType, setMessageType] = useState('');\n\n  useEffect(() => {\n    if (isValidEmail(email) != true) {\n      setMessageType('error');\n      setMessage('Email is not valid.');\n    }\n  }, [email]);\n\n  useEffect(() => {\n    if (accountSuccessMessage) {\n      setMessage(accountSuccessMessage);\n      setMessageType('success');\n    }\n  }, [accountSuccessMessage]);\n\n  useEffect(() => {\n    if (accountErrorMessage) {\n      setMessage(accountErrorMessage);\n      setMessageType('error');\n    }\n  }, [accountErrorMessage]);\n\n  useEffect(() => {\n    if (\n      (email != '' || email != undefined) &&\n      (confirmationCode != '' || confirmationCode != undefined)\n    ) {\n      dispatch(unlockAccount({ email, confirmationCode }));\n    }\n  }, [email, confirmationCode]);\n\n  return (\n    <>\n      <main>\n        {message !== '' && (\n          <StatusBarComponent messageType={messageType} message={message} />\n        )}\n      </main>\n    </>\n  );\n}\n\nexport default AccountRecovery;\n"],"names":["AccountRecovery","_useParams","useParams","emailEncoded","confirmationCode","email","replace","dispatch","useDispatch","_useSelector","useSelector","state","account","accountSuccessMessage","accountErrorMessage","_useState","useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","messageType","setMessageType","useEffect","isValidEmail","unlockAccount","jsx","Fragment","children","StatusBarComponent"],"mappings":"+HAUA,SAASA,GAAkB,CACzB,IAAAC,EAA2CC,EAAU,EAA7CC,EAAAF,EAAAE,aAAcC,EAAiBH,EAAjBG,iBAEhBC,EAAQF,EAAaG,QAAQ,OAAQ,GAAG,EAExCC,EAAWC,IAEXC,EACJC,EAAY,SAACC,EAAA,CAAA,OAAUA,EAAMC,QAAO,EAD9BC,IAAAA,sBAAuBC,EAAoBL,EAApBK,oBAGzBC,EAAwBC,EAAA,SAC5B,sDACF,EAAAC,EAAAC,EAAAH,EAAA,CAAA,EAFOI,EAASF,EAAA,CAAA,EAAAG,EAAUH,EAAA,CAAA,EAG1BI,EAAsCL,WAAS,EAAE,EAAAM,EAAAJ,EAAAG,EAAA,CAAA,EAA1CE,EAAAD,EAAA,CAAA,EAAaE,EAAcF,EAAA,CAAA,EAElCG,OAAAA,EAAAA,UAAU,UAAM,CACVC,EAAarB,CAAK,GAAK,KACzBmB,EAAe,OAAO,EACtBJ,EAAW,qBAAqB,EAEpC,EAAG,CAACf,CAAK,CAAC,EAEVoB,EAAAA,UAAU,UAAM,CACVZ,IACFO,EAAWP,CAAqB,EAChCW,EAAe,SAAS,EAE5B,EAAG,CAACX,CAAqB,CAAC,EAE1BY,EAAAA,UAAU,UAAM,CACVX,IACFM,EAAWN,CAAmB,EAC9BU,EAAe,OAAO,EAE1B,EAAG,CAACV,CAAmB,CAAC,EAExBW,EAAAA,UAAU,UAAM,EAEXpB,GAAS,IAAMA,GAAS,QACxBD,GAAoB,IAAMA,GAAoB,OAE/CG,EAASoB,EAAc,CAAEtB,MAAAA,EAAOD,iBAAAA,CAAkB,CAAA,CAAC,CAEvD,EAAG,CAACC,EAAOD,CAAgB,CAAC,EAG1BwB,EAAAA,IAAAC,EAAAA,SAAA,CACEC,SAACF,EAAA,IAAA,OAAA,CACEE,SAAYX,IAAA,UACVY,EAAmB,CAAAR,YAAAA,EAA0BJ,QAAAA,EAAkB,EAEpE,CACF,CAAA,CAEJ"}